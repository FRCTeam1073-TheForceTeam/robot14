/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "Robot.h"
#include "Commands/ShiftLowGear.h"
#include "RobotStatus.h"
#include "Commands/DoubleAutonomousCommandGroup.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Bling* Robot::bling = 0;
DriveTrain* Robot::driveTrain = 0;
Launcher* Robot::launcher = 0;
Collector* Robot::collector = 0;
Shifter* Robot::shifter = 0;
Vision* Robot::vision = 0;
Dashboard14* Robot::dashboard14 = 0;
RobotRangeFinder* Robot::robotRangeFinder = 0;
Elevator* Robot::elevator = 0;
DataSending* Robot::dataSending = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Preferences* Robot::prefs = 0;
//BEGIN DEBUG CODE
//DataSending* Robot::dataSending = 0;
//END DEBUG CODE
DigitalInput* Robot::jumper14 = 0;
Robot::WhatRobot_t Robot::whatRobot = atlasRobot;
void Robot::RobotInit() {
	count=1;
	prefs = Preferences::GetInstance();
	RobotMap::init();
	RobotStatus::RobotStatusInit();
	jumper14 = new DigitalInput(DIGITAL_JUMPER_14);
		if(jumper14->Get() == 0){
			whatRobot = mobileBase2014;
			printf("MobileBase2014 Recognized \n \n");
		}
		else{
			whatRobot = atlasRobot;
			printf("Atlas Robot Recognized \n \n");
		}
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	bling = new Bling();
	driveTrain = new DriveTrain();
	launcher = new Launcher();
	collector = new Collector();
	shifter = new Shifter();
	vision = new Vision();
	dashboard14 = new Dashboard14();
	robotRangeFinder = new RobotRangeFinder();
	elevator = new Elevator();
	dataSending = new DataSending();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// keep this here
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommmandGroup();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	debugAutoCommand = new autonomousDebugCommandGroup();
	
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("Single Auto", new AutonomousCommmandGroup());
	autoChooser->AddObject("Double Auto", new DoubleAutonomousCommandGroup());
	SmartDashboard::PutData("Autonomous Modes", autoChooser);
	
	printf("\n\nFRC2014 " __DATE__ " " __TIME__ "\n\n" __FILE__ "\n\n");
	RobotStatus::SetAutonomousStatus(RobotStatus::AUTONOMOUS_PREMATCH);
  }
Robot::WhatRobot_t Robot::GetWhichRobot(){
	return whatRobot;
}
	
void Robot::AutonomousInit() {
	autonomousCommand = (Command *) autoChooser->GetSelected();
	if (autonomousCommand != NULL) {
		RobotStatus::SetAutonomousStatus(RobotStatus::AUTONOMOUS_PREMATCH);
		autonomousCommand->Start();
	}
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	if(count%5==0)
		Robot::dataSending->SendTheData();
	count++;
}
	
void Robot::TeleopInit() {
	autonomousCommand->Cancel();
	ShiftLowGear* cmd = new ShiftLowGear();
	cmd->Start();
	RobotStatus::SetAutonomousStatus(RobotStatus::TELEOP);
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	if(count%5==0)
		Robot::dataSending->SendTheData();
	count++;
}
void Robot::DisabledInit() {
	RobotStatus::SetAutonomousStatus(RobotStatus::AUTONOMOUS_PREMATCH);
}
void Robot::TestPeriodic() {
	lw->Run();
}
void Robot::DisabledPeriodic(){
	if(count%5==0)
			Robot::dataSending->SendTheData();
		count++;
}
START_ROBOT_CLASS(Robot);
