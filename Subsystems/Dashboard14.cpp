/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "Dashboard14.h"
#include "../Robot.h"
#include "../Robotmap.h"
#include "../Commands/SendToDashboard.h"
#include "RobotRangeFinder.h"
#define CURRENT_AMPS_CONSTANT (71.43)
Dashboard14::Dashboard14() : Subsystem("Dashboard14") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Dashboard14::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new SendToDashboard());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Dashboard14::SendData()
{
	SmartDashboard::PutNumber("Battery", DriverStation::GetInstance()->GetBatteryVoltage());
	SmartDashboard::PutNumber("TimeCounterWidget", DriverStation::GetInstance()->GetMatchTime());
	SmartDashboard::PutNumber("PSI Gauge", Robot::launcher->pressureTransducer->GetPressurePSI());
	SmartDashboard::PutBoolean("Gear Shifter", Robot::shifter->IsLowGear());
	SmartDashboard::PutNumber("Current Sensor", (RobotMap::dataSendingBatteryCurrent->GetVoltage()-2.5)*CURRENT_AMPS_CONSTANT);
	SmartDashboard::PutNumber("Distance", Robot::robotRangeFinder->GetDistance());
	
	//used until these are integrated into the widget
	SmartDashboard::PutNumber("Current Elevation", RobotMap::elevatorElevationEncoder->GetAverageVoltage());
	SmartDashboard::PutNumber("Max Elevation", Robot::elevator->GetElevatorUp());
	SmartDashboard::PutNumber("Min Elevation", Robot::elevator->GetElevatorDown());
	
	//use instead of above once widget is done
	char data[100];
	sprintf(data,"%lf,%lf,%lf", RobotMap::elevatorElevationEncoder->GetAverageVoltage(),Robot::elevator->GetElevatorUp(),Robot::elevator->GetElevatorDown());
	SmartDashboard::PutString("Elevator Data", data);
	
	bool goodToGo = !Robot::launcher->IsGoodPressure() && Robot::robotRangeFinder->InRange();
	int shooterReady;
	if(goodToGo){
		SmartDashboard::PutNumber("Shooter Ready", 1);
		shooterReady = 1;
	}
	else if(!Robot::launcher->IsGoodPressure() && !Robot::robotRangeFinder->InRange())
	{
		SmartDashboard::PutNumber("Shooter Ready", 0);
		shooterReady = 0;
	}
	else if(Robot::launcher->IsGoodPressure() && Robot::robotRangeFinder->InRange())
	{
		SmartDashboard::PutNumber("Shooter Ready", -1);
		shooterReady = -1;
	}
	else
	{
		SmartDashboard::PutNumber("Shooter Ready", -2);
		shooterReady = -2;
	}
	
	RobotStatus::SetLauncherStatus(goodToGo ? RobotStatus::LAUNCHER_READY : RobotStatus::LAUNCHER_NOT_READY);
	char data2[100];
	sprintf(data2,"%d,%f", shooterReady, RobotMap::robotRangeFinderUltrasonicSensor->GetAverageVoltage());
	SmartDashboard::PutString("Shooter Data", data2);
	
}
