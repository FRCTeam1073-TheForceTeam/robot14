/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */

#include "RobotRangeFinder.h"
#include "../Robotmap.h"
#include "../Robot.h"
static const float VoltsPerCM = 0.0049;
static const int MaxFarShootingRangeCmDflt = 243; // 8ft
static const int MinFarShootingRangeCmDflt = 198;   //6.5
static const int MaxNearShootingRangeCmDflt = 152; //5
static const int MinNearShootingRangeCmDflt = 106;
static const int AutonomousRangeCmDflt = 183;//6 ft
int RobotRangeFinder::maxFarShootingRangeCM = 0;
int RobotRangeFinder::minFarShootingRangeCM = 0;
int RobotRangeFinder::minNearShootingRangeCM = 0;
int RobotRangeFinder::maxNearShootingRangeCM = 0;
int RobotRangeFinder::autonomousRangeCM = 0;
RobotRangeFinder::RobotRangeFinder() : Subsystem("RobotRangeFinder") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	ultrasonicSensor = RobotMap::robotRangeFinderUltrasonicSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	maxFarShootingRangeCM = Robot::prefs->GetInt("maxShootingRangeCM", MaxFarShootingRangeCmDflt);
	minFarShootingRangeCM = Robot::prefs->GetInt("minShootingRangeCM", MinFarShootingRangeCmDflt);
	maxNearShootingRangeCM = Robot::prefs->GetInt("maxNearShootingRangeCM", MaxNearShootingRangeCmDflt);
	minNearShootingRangeCM = Robot::prefs->GetInt("minNearShootingRangeCM", MinNearShootingRangeCmDflt);	
	autonomousRangeCM = Robot::prefs->GetInt("autonomousRangeCM", AutonomousRangeCmDflt);
	printf("recorded Max: %d\tRecordedMin: %d\tAutonomous: %d\n", maxFarShootingRangeCM, minFarShootingRangeCM,autonomousRangeCM);
}
    
void RobotRangeFinder::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
bool RobotRangeFinder::InRange() {
	if(((GetDistance() <= maxFarShootingRangeCM) && (GetDistance() >= minFarShootingRangeCM)) || ((GetDistance() <= maxNearShootingRangeCM) && (GetDistance() >= minNearShootingRangeCM))) {
		return true;
	}
	return false;
}
bool RobotRangeFinder::IdealAutonomousRange() {
	const int dist = GetDistance();
	return dist <= autonomousRangeCM;
}
int RobotRangeFinder::GetDistance() {
	float voltage = ultrasonicSensor->GetVoltage();
	// printf("Voltage: %f %d cm\n", voltage, (int)(voltage/VoltsPerCM));
	return (int)(voltage/VoltsPerCM);
}
