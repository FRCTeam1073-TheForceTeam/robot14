/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "DataSending.h"
#include "../Robotmap.h"
#include "../Robot.h"
static const float VoltsPerCM = 0.0049;
#define AMPS_CONSTANT (71.43)
#define PSI_CONSTANT (22.22222)
#define ENABLE_BACKGROUND_THREAD "EnableBackgroundThread"
#define DATA_SEND_INTERVAL "DataSendInterval"
DataSending::DataSending() : Subsystem("DataSending") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	batteryCurrent = RobotMap::dataSendingBatteryCurrent;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	packetCount=1;
	dataSendInterval = Robot::prefs->GetInt(DATA_SEND_INTERVAL, 5);
	enableBackgroundThread = Robot::prefs->GetBoolean(ENABLE_BACKGROUND_THREAD, false);
}
void DataSending::InitDefaultCommand() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	//printf("You are now sending data\n");
}
void DataSending::SendTheData(){
	if(enableBackgroundThread){
	if(packetCount%dataSendInterval==0){
	strIndex = 0;
	Dashboard &dash = DriverStation::GetInstance()->GetHighPriorityDashboardPacker();
	DriverStation *drive = DriverStation::GetInstance();
	Send(false);//no this is not the debug code
	Send(drive->GetBatteryVoltage());//battery info
	Send((batteryCurrent->GetVoltage()-2.5)*AMPS_CONSTANT);
	GetDriveJoystickInfo();//joystick info
	GetOperatorJoystickInfo();//moar joystick info
	GetVicInfo();//victor info
	Send(RobotMap::launcherSolenoidLeft->Get());//solenoid info
	Send(RobotMap::launcherSolenoidRight->Get());
	Send(RobotMap::shifterDoubleSolenoid->Get());
	Send((bool)RobotMap::launcherCompressor->GetPressureSwitchValue());//sensor info
	Send(RobotMap::robotRangeFinderUltrasonicSensor->GetVoltage()/VoltsPerCM);
	Send(RobotMap::driveTrainGyro->GetAngle());
	Send(RobotMap::launcherPressureSwitch->GetVoltage()*PSI_CONSTANT);//transducer1
	Send(RobotMap::collectorLeftRoller->Get()*-1);//talon info
	Send(RobotMap::collectorRightRoller->Get());
	Send((packetCount++)-1);//number of packets
	Send(dataSendInterval);//every nth number data is sent from a 50 hz source
	//a.k.a above number / 50 = Hz
	Send(drive->GetMatchTime());
	Send(drive->IsEnabled());
	dash.AddString(strBuffer);
	dash.Finalize();
	UpdateUserLCD();
	}
	}
}
void DataSending::Send(double f, int digits)
{
	char buff[20];
	int len = sprintf(buff, "%.*f,", digits, f);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
void DataSending::Send(bool b)
{
	int len = 2;
	if(strIndex+len < MaxBuffer){
		if(b)	strcpy(strBuffer+strIndex, "1,");
		else	strcpy(strBuffer+strIndex, "0,");
		strIndex += len;
	}
}
void DataSending::Send(int i)
{
	char buff[20];
	int len = sprintf(buff, "%d,", i);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
void DataSending::Send(char *s)
{
	char buff[81];
	int len = sprintf(buff, "%s,", s);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
void DataSending::UpdateUserLCD(){
	char line1[200];
	char line2[200];
	char line3[200];
	char line4[200];
	string setting = "Shifter is "+GetGearSetting();
	strcpy(line1,setting.c_str());
	if((bool)RobotMap::launcherCompressor->GetPressureSwitchValue())sprintf(line2,"Sufficent Pressure");
	else sprintf(line2,"Insufficient Pressure");
	if(((batteryCurrent->GetVoltage()-2.5)*AMPS_CONSTANT)<150)sprintf(line3,"Don't drop the clutch!");
	else sprintf(line3,"You droped the clutch!");
	sprintf(line4, "Battery Current is %f Amps",((batteryCurrent->GetVoltage()-2.5)*AMPS_CONSTANT));
	DriverStationLCD *lcd = DriverStationLCD::GetInstance();
	lcd->PrintfLine(DriverStationLCD::kUser_Line1, "%s",line1);
	lcd->PrintfLine(DriverStationLCD::kUser_Line2, "%s",line2);
	lcd->PrintfLine(DriverStationLCD::kUser_Line3, "%s",line3);
	lcd->PrintfLine(DriverStationLCD::kUser_Line4, "%s",line4);
	lcd->UpdateLCD();
}
void DataSending::GetVicInfo(){
	Send(RobotMap::driveTrainLeftFront->Get());
	Send(RobotMap::driveTrainRightFront->Get());
	Send(RobotMap::driveTrainLeftBack->Get());
	Send(RobotMap::driveTrainRightBack->Get());
	Send(RobotMap::elevatorAngleAdjuster->Get());
}
void DataSending::GetDriveJoystickInfo(){
	Send(Robot::oi->getDriveStick()->GetX());
	Send(Robot::oi->getDriveStick()->GetY());
	Send(Robot::oi->getDriveStick()->GetZ());
	Send(Robot::oi->getForwardDirectionButton());
	Send(Robot::oi->getToggleDriveMode());
	Send(Robot::oi->getHighGear());
	Send(Robot::oi->getLowGear());
}
void DataSending::GetOperatorJoystickInfo(){
	Send(Robot::oi->getCatchModeButton());
	Send(Robot::oi->getCollectorToShooterButton());
	Send(Robot::oi->getCollectorDownButton2());
	Send(Robot::oi->getCollectorDownButton());
	Send(Robot::oi->getCollectorUpButton2());
	Send(Robot::oi->getCollectorUpButton());
	Send(Robot::oi->getCollectButtonToggle());
	Send(Robot::oi->getCollectButtonHold());
	Send(Robot::oi->getPurgeButton());
	Send(Robot::oi->getLaunchBallButton());
}
string DataSending::GetGearSetting(){
	if(RobotMap::shifterDoubleSolenoid->Get()==DoubleSolenoid::kForward){
		return "low";
	}
	if(RobotMap::shifterDoubleSolenoid->Get()==DoubleSolenoid::kReverse){
		return "high";
	}
	if(RobotMap::shifterDoubleSolenoid->Get()==DoubleSolenoid::kOff){
		return "off";
	}
	return 0;
}
bool DataSending::istheCurrentSensorReady(){
	float theCurrent = ((batteryCurrent->GetVoltage()-2.5)*AMPS_CONSTANT);
	return((0<theCurrent)&&(theCurrent<200));
}
