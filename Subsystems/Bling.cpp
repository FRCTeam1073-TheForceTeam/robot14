/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "Bling.h"
#include "../Robotmap.h"
#include "../Robot.h"
#include "../Arduino.h"
const int NumPixels = 64;
Bling::Bling() : Subsystem("Bling") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	blong = RobotMap::bling;
	R = 128;
	G = 128;
	B = 128;
	blong->SetSampleDataOnFalling();
	blong->SetBitsPerWord(8);
	blong->SetMSBFirst();
	blong->SetClockActiveLow();
	blong->ApplyConfig();
	forCounter = 0;
	iCounter = 0;
	pattern = OFF;
	Bling::InitializeBackgroundTask();
	
}
    
void Bling::InitDefaultCommand() {
}
void Bling::SetPattern(PATTERN pattern){
	this->pattern = pattern;
}

void Bling::Execute()
{
	//printf(".\n");
	switch (pattern){
	case OFF:
		clearStrip();
		for(i = 0; i < 64; i++){
			dispColor(128, 128, 128);
		}
		break;
	case BLUE_SOLID:
		clearStrip();
			for(i = 0; i < 64; i++){
				dispColor(128, 128, 128);
			}
		break;
	case BLUE_BLINKING:
		break;
	case GREEN_SOLID:
		clearStrip();
			for(i = 0; i < 64; i++){
				dispColor(128, 128, 128);
			}
		break;
	case GREEN_BLINKING:
		clearStrip();
		
		
		break;
	case RAINBOW_EXPLOSION:
		clearStrip();
		rainbowExplosion();
		break;
	case RED_BLINKING:
		break;
	case PURPLE_SOLID:
		clearStrip();
			for(i = 0; i < 64; i++){
				dispColor(128, 128, 128);
			}
		break;
	case PURPLE_BLINKING:
		break;
	default:
		printf("ERROR: in BLing.cpp execute switch");
	}
}
const float blingNice = 0.001f;
int BlingBgFunction(...)
{
	Wait(1.0);  //wait a second to make sure everything is ready
	while (1)  // No stopping the Zombie, Life before Autonomous....
	{
		Wait(blingNice);
		Robot::bling->Execute();
	}
}
SEM_ID BlingSemaphore = 0;
static Task* BlingTask;	
void Bling::InitializeBackgroundTask() {
	printf("Bling background task initialized\n");
	BlingTask = new Task("BlingTask", BlingBgFunction);
	BlingSemaphore = semMCreate(SEM_DELETE_SAFE | SEM_INVERSION_SAFE); // synchronize access to multi-value registers
	BlingTask->Start();
	printf("Bling Flame On!\n");
}

void Bling::dispClear()
{
	dispColor(0, 0, 0);
}
void Bling::dispColor(int R, int G, int B)
{
	if (R < 128 && G < 128 && B < 128)
	{
		blong->Write(128+G);
		blong->Write(128+R);
		blong->Write(128+B);
		// printf("called SPI write %d %d %d\n",128+R,128+G,128+B);
	}
	
}
void Bling::magicFunction(){
blong->Write(0);
}

void Bling::rainbowExplosion(){
  for(int i = 0; i<33; i++){
    clearStrip();
    lightNth(64 -i, 0, 127, 0);
    lightNth(i, 127, 0, 0);
   delay(20);
  }
  
  for (int i=0; i<=24; i++) {
    dispClear();
  }
  for (int i=0; i<=14; i++) {
    dispColor(127, 127, 127);
  }
  
  for(int i=0;i<=33;i++){ 
    for(int j=0;j<=32-i;j++){
      dispClear();
    }
    for(int k=0;k<i;k++){
      rainbowColor((i -k)*11);
      dispColor(R, G, B);
    }
    for(int l=0;l<i;l++){
      rainbowColor((i + l)*3);
      dispColor(R, G, B);
    }
  delay(20);
  clearStrip();
  }
  delay(500);
}

void Bling::rainbowColor(int pos) {
	  //pos is the position on the rainbow
	  //There are 384 colors
	  switch(pos / 128) {
	    case 0:
	      R = 127 - (pos%128);
	      G = pos%128;
	      B = 0;
	      break;
	    case 1:
	      G = 127 - (pos%128);
	      B = pos%128;
	      R = 0;
	      break;
	    case 2:
	      B = 127 - (pos%128);
	      R = pos%128;
	      G = 0;
	      break;
	  }
	}

void Bling::lightNth(int n, int r, int g, int b) {
  if (n > num_pixels) {
    return;
  }

  for(int i=0; i<=n-1; i++) {
    dispClear();
    //dispColor(0,127,127);
  }
  dispColor(r, g, b);
  
  magicFunction();
}

void Bling::clearStrip() {
  for(int i=0; i<=num_pixels; i++) {
    dispClear();
  }
  magicFunction();
}
void Bling::makeItBlink(int r, int g, int b)
{
  for(int j = 0; j < 500; j++)
  { 
    for(int i = 0; i <= 64; i++){
       dispColor(r, g, b);
      
    }
     setStrip();
    
    
    delay(25);
     for(int k = 0; k <= 64; k++)
     {
       dispColor(0, 0, 0);
      
    }
     setStrip();
    delay(25);
  }
}
void Bling::setCoolor(int r, int g, int b){
  for(int i = 0; i < 64; i++){
    dispColor(r, g, b);
  }
}
