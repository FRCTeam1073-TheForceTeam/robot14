/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "Bling.h"
#include "../Robotmap.h"
#include "../Robot.h"
Bling::Bling() : Subsystem("Bling") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	pattern = OFF;
	arduino = DigitalModule::GetInstance(1)->GetI2C(8);
	arduino->SetCompatibilityMode(true);
	Bling::InitializeBackgroundTask();
}
void Bling::SetPattern(PATTERN pattern){
	this->pattern = pattern;
}
void Bling::Execute()
{
	uint8_t* msg = new uint8_t[1];
	msg[0] = (uint8_t) pattern;
	uint8_t* resp = new uint8_t[100];
	arduino->Transaction(msg, 1, resp, 0);
}
const float blingNice = 0.5f;
int BlingBgFunction(...)
{
	Wait(1.0);  //wait a second to make sure everything is ready
	while (1)  // No stopping the Zombie, Life before Autonomous....
	{
		Wait(blingNice);
		Robot::bling->Execute();
	}
}
SEM_ID BlingSemaphore = 0;
static Task* BlingTask;	
void Bling::InitializeBackgroundTask() {
	printf("Bling background task initialized\n");
	BlingTask = new Task("BlingTask", BlingBgFunction);
	BlingSemaphore = semMCreate(SEM_DELETE_SAFE | SEM_INVERSION_SAFE); // synchronize access to multi-value registers
	BlingTask->Start();
	printf("Bling Flame On!\n");
}
